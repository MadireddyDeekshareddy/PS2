onst mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
  phoneNumber: String,
  walletId: String
});

userSchema.pre('save', async function(next) {
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;


//Wallet.js

const mongoose = require('mongoose');

const walletSchema = new mongoose.Schema({
  userId: String,
  balance: Number,
  transactions: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Transaction' }]
});

const Wallet = mongoose.model('Wallet', walletSchema);
module.exports = Wallet;


//Transaction.js

const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
  walletId: String,
  amount: Number,
  type: String,
  timestamp: Date
});

const Transaction = mongoose.model('Transaction', transactionSchema);
module.exports = Transaction;


Routes
//auth.js

const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

router.post('/register', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.send(user);
  } catch (err) {
    res.status(400).send(err);
  }
});

router.post('/login', async (req, res) => {
  try {
    const user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(401).send({ message: 'Invalid email or password' });
    }
    const isPasswordValid = await bcrypt.compare(req.body.password, user.password);
    if (!isPasswordValid) {
      return res.status(401).send({ message: 'Invalid email or password' });
    }
    const token = jwt.sign({ userId: user._id }, process.env.SECRET_KEY, { expiresIn: '1h' });
    res.send({ token });
  } catch (err) {
    res.status(400).send(err);
  }
});

module.exports = router;


//wallet.js

const express = require('express');
const router = express.Router();
const Wallet = require('../models/Wallet');
const Transaction = require('../models/Transaction');

router.post('/:userId', async (req, res) => {
  try {
    const wallet = await Wallet.findOne({ userId: req.params.userId });
    if (!wallet) {
      const newWallet = new Wallet({ userId: req.params.userId, balance: 0 });
      await newWallet.save();
      res.send(newWallet);
    } else {
      res.send(wallet);
    }
  } catch (err) {
    res.status(400).send(err);
  }
});

router.put('/:walletId/addBalance', async (req, res) => {
  try {
    const wallet = await Wallet.findByIdAndUpdate(req.params.walletId, { $inc: { balance: req.body.amount } }, { new: true });
    res.send(wallet);
  } catch (err) {
    res.status(400).send(err);
  }
});

router.put('/:walletId/sendMoney', async (req, res) => {
  try {
    const senderWallet = await Wallet.findById(req.params.walletId);
    const receiverWallet = await Wallet.findById(req.body.receiverWalletId);
    if (senderWallet.balance < req.body.amount) {
      return res.status(400).send({ message: 'Insufficient balance' });
    }
    senderWallet.balance -= req.body.amount;
    receiverWallet.balance += req.body.amount;
    await senderWallet.save();
    await receiverWallet.save();
    const transaction = new Transaction({ walletId: req.params.walletId, amount: req.body.amount, type: 'send' });
    await transaction.save();
    res.send({ message: 'Money sent successfully' });
  } catch (err) {
    res.status(400).send(err);
  }
});

module.exports = router;